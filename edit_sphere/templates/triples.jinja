{% macro render_triple(triple, subject) %}
    <li class="list-group-item d-flex align-items-center">
        <span class="flex-grow-1 d-flex flex-column justify-content-center p-3 w-75">
            <span class="ellipsis" title="{{triple['predicate']['value']}}">
                <a class="fw-bold"href="{{ (triple['predicate']['value'] | split_ns)[0][:-1] }}#{{ triple['predicate']['value'] }}" target="_blank" alt="Definition of the property {{ triple['predicate']['value'] }}">
                    {{ triple['predicate']['value'] | human_readable_predicate }}
                    <i class="bi bi-question-circle ml-1"></i>
                </a>
            </span>
            {% if triple['object']['value'] != triple['object']['value'] | human_readable_predicate %}
                <span title="{{ triple['object']['value'] }}" class="object-value mt-4 ellipsis">
                    <a href="{{ (triple['object']['value'] | split_ns)[0][:-1] }}#{{ triple['object']['value'] }}" target="_blank" alt="Definition of the value {{ triple['object']['value'] }}">
                        {{ triple['object']['value'] | human_readable_predicate }}
                        <i class="bi bi-question-circle ml-1"></i>
                    </a>
                </span>
            {% elif triple['object']['value'].startswith('http://') or triple['object']['value'].startswith('https://') %}
                <span title="{{ triple['object']['value'] }}" class="object-value mt-4 ellipsis">
                    <a href="{{url_for('show_triples', subject=triple['object']['value']|urlencode)}}" alt="Link to the entity {{ triple['object']['value'] }}">{{ triple['object']['value'] }}</a>
                </span>
            {% else %}
                <span title="{{ triple['object']['value'] }}" class="object-value mt-4 ellipsis">{{ triple['object']['value'] }}</span>
            {% endif %}
            <form class="edit-form d-none"
                action="{{ url_for('update_triple') }}"
                method="post">
                <input type="hidden" name="subject" value="{{ subject }}">
                <input type="hidden" name="predicate" value="{{ triple['predicate']['value'] }}">
                <input type="hidden" name="old_value" value="{{ triple['object']['value'] }}">
                <input type="text" class="form-control my-4" name="new_value" value="{{ triple['object']['value'] }}">
                <div>
                    <button type="submit" class="btn btn-primary">{{_('Update')}}</button>
                    <button type="button" class="btn btn-secondary cancel-button">{{_('Cancel')}}</button>
                </div>
            </form>
        </span>
        <div class="align-self-start">
            <div class="d-flex flex-column flex-sm-row">
                <button class="btn btn-outline-secondary edit-button m-2">
                    <i class="bi bi-pencil-square"></i> <!-- Icona di modifica -->
                </button>    
                <button class="btn btn-outline-danger delete-button m-2" data-subject="{{ subject }}" data-predicate="{{ triple['predicate']['value'] }}" data-object="{{ triple['object']['value'] }}">
                    <i class="bi bi-trash"></i> <!-- Icona di cancellazione -->
                </button>                    
            </div>
        </div>
    </li>
{% endmacro %}

{% macro add_form(type) %}
    <div class="mb-5 add-form-{{ type }} d-none">
        <h5>{{_('Add a new piece of information')}}</h5>
        <form action="{{ url_for('add_triple') }}" method="post">
            <input type="hidden" name="subject" value="{{ subject }}">
            <div class="form-group">
                {% if can_be_added %}
                    <select class="form-control" name="predicate" required>
                        {% for predicate in can_be_added %}
                            <option value="{{ predicate }}">{{ predicate | human_readable_predicate }}</option>
                        {% endfor %}
                    </select>
                {% else %}
                    <input type="text" class="form-control" name="predicate" required>
                {% endif %}
            </div>
            <div class="form-group mt-3">
                <label for="object">{{_('Value')}}</label>
                <input type="text" class="form-control" name="object" required>
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">{{_('Add')}}</button>
                <button type="button" class="btn btn-secondary cancel-add-button-{{ type }}">{{_('Cancel')}}</button>
            </div>
        </form>
    </div>
{% endmacro %}

{% extends "_base.jinja" %}

{% block content %}
<div class="container">
    <h2 class="mb-4 ellipsis">{{_('About')}} {{ subject | human_readable_predicate }}</h2>
           
    {% if history[subject] %}
    <div>
        <a href="{{ url_for('entity_history', entity_uri=subject) }}" class="btn btn-outline-primary">
            <i class="bi bi-clock-history"></i> {{_('Time machine')}}
        </a>
    </div>
    {% endif %}

    {% if triples %}

        {% set attributes_triples = [] %}
        {% set links_triples = [] %}
        {% for triple in triples %}
            {% if triple['object']['value'] != triple['object']['value'] | human_readable_predicate or not (triple['object']['value'].startswith('http://') or triple['object']['value'].startswith('https://')) %}
                {% set _ = attributes_triples.append(triple) %}
            {% elif triple['object']['value'] == triple['object']['value'] | human_readable_predicate and (triple['object']['value'].startswith('http://') or triple['object']['value'].startswith('https://')) %}
                {% set _ = links_triples.append(triple) %}
            {% endif %}
        {% endfor %}
    
        {% for type, type_human, triples_set in [('attributes', _('attributes'), attributes_triples), ('links', _('links to other resources'), links_triples)] %}
            {% if triples_set %}
                <div class="d-flex justify-content-start align-items-baseline mt-5 mb-3">
                    <h4 class="me-4">{{ type_human.capitalize() }}</h4>
                    <button class="btn btn-outline-success add-button-{{ type }}" title="{{_('Add new ' + type_human)}}"><i class="bi bi-plus-lg"></i></button>
                </div>            
                {{ add_form(type) }}
                <ul class="list-group">
                    {% for triple in triples_set %}
                        {{ render_triple(triple, subject) }}
                    {% endfor %}
                </ul>
            {% endif %}
        {% endfor %}

    {% else %}
        <p class="alert alert-warning mt-5 mb-4">{{_('There is no information related to this entity in the dataset')}}</p>
        <button class="btn btn-outline-success add-button-links" title="{{_('Add new link')}}">{{_("Let's add some metadata")}}</button>
        <div class="add-form-links d-none mt-4">
            <h5>{{_('Add a new piece of information')}}</h5>
            <form action="{{ url_for('add_triple') }}" method="post">
                <input type="hidden" name="subject" value="{{ subject }}">
                <div class="form-group">
                    <label for="predicate">{{_('Property')}}</label>
                    <input type="text" class="form-control" name="predicate" required>
                </div>
                <div class="form-group mt-3">
                    <label for="object">{{_('Value')}}</label>
                    <input type="text" class="form-control" name="object" required>
                </div>
                <div class="mt-3">
                    <button type="submit" class="btn btn-primary">{{_('Add')}}</button>
                    <button type="button" class="btn btn-secondary cancel-add-button-links">{{_('Cancel')}}</button>
                </div>
            </form>
        </div>              
    {% endif %}
</div>

<script>
    $(document).ready(function () {
        
        function toggleEditForm(listItem) {
            const form = listItem.find('.edit-form');
            const valueSpan = listItem.find('.object-value');
            form.toggleClass('d-none');
            valueSpan.toggleClass('d-none');
        }

        function showAddFormOrAlert(type) {
            if ({{ can_be_added|length }} === 0) {
                Swal.fire({
                    title: "{{ _('Warning') }}",
                    text: "{{ _('You cannot add more properties; the limit for each property has been reached') }}",
                    icon: 'warning',
                    confirmButtonColor: '#3085d6'
                });
            } else {
                $(`.add-form-${type}`).toggleClass('d-none');
            }
        }

        $('.edit-button').click(function () {
            toggleEditForm($(this).closest('.list-group-item'));
        });

        $('.cancel-button').click(function () {
            toggleEditForm($(this).closest('.list-group-item'));
            toggleEditForm($(this).closest('form'));
        });

        $('.delete-button').click(function() {
            const subject = $(this).data('subject');
            const predicate = $(this).data('predicate');
            const object_value = $(this).data('object');
            if ({{ can_be_deleted | safe }}.includes(predicate)) {
                Swal.fire({
                    title: "{{_('Are you sure?')}}",
                    text: "{{_('You are about to delete this information. In any case, it will be possible to restore it')}}",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: "{{_('Yes, delete it!')}}"
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.post('/delete_triple', {
                            subject: subject,
                            predicate: predicate,
                            object: object_value
                        }, function() {
                            Swal.fire(
                                "{{_('Deleted!')}}",
                                "{{_('The data was deleted correctly')}}",
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        });
                    }
                }); 
            } else {
                Swal.fire({
                    title: "{{ _('Warning') }}",
                    text: "{{ _('This property is mandatory and cannot be deleted') }}",
                    icon: 'warning',
                    confirmButtonColor: '#3085d6'
                });
            }
        });
    
        $('.add-button-attributes').click(function() {
            showAddFormOrAlert('attributes');
        });
        $('.add-button-links').click(function() {
            showAddFormOrAlert('links');
        });
        $('.cancel-add-button-attributes').click(function() {
            $('.add-form-attributes').addClass('d-none');
        });
        $('.cancel-add-button-links').click(function() {
            $('.add-form-links').addClass('d-none');
        });
    });
</script>
{% endblock %}