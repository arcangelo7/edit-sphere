{% macro render_triple(triple, subject, externalEntity, isDraggable, object, orderedBy) %}
    <li class="d-flex align-items-center property-value {{ 'draggable' if isDraggable else '' }}" data-object-id="{{ object }}" data-property-id="{{ triple[1] }}" data-ordered_by="{{ orderedBy }}">
        {% if isDraggable %}
            <span class="drag-handle">â˜°</span>
        {% endif %}
        <span class="flex-grow-1 d-flex flex-column justify-content-center p-3 w-75">
            <span class="object-value ellipsis">
                {% if triple[2] %}
                    {% if externalEntity %}
                        <a href="{{url_for('show_triples', subject=externalEntity)}}" alt="{{_('Redirection to the entity %(entity)s', entity=externalEntity)}}" title="{{_('Redirection to the entity %(entity)s', entity=externalEntity)}}">{{ triple[2] | human_readable_predicate(subject_classes) }}</a>
                    {% else %}
                        {{ triple[2] | human_readable_predicate(subject_classes) }}
                    {% endif %}
                {% else %}
                    {{ _("No result from SPARQL query") }}
                {% endif %}
            </span>
            <form class="edit-form d-none"
                action="{{ url_for('update_triple') }}"
                method="post">
                {{ update_form.subject(value=subject) }}
                {{ update_form.predicate(value=triple[1]) }}
                {{ update_form.old_value(value=triple[2]) }}
                {% if optional_values[triple[1]] %}
                    <select name="new_value" class="form-control mb-4">
                        {% for value in optional_values[triple[1]] %}
                            <option value="{{ value }}" {% if value == triple[2] %}selected{% endif %}>{{ value | human_readable_predicate(subject_classes) }}</option>
                        {% endfor %}
                    </select>
                {% else %}
                    {{ update_form.new_value(class="form-control mb-4", value=triple[2]) }}
                {% endif %}
                <div>
                    <button type="submit" class="btn btn-primary">{{_('Update')}}</button>
                    <button type="button" class="btn btn-secondary cancel-button">{{_('Cancel')}}</button>
                </div>
            </form>
        </span>
        <div class="align-self-start">
            <div class="d-flex flex-column flex-sm-row">
                {% if shacl and triple[1] in mandatory_values and triple[2] == mandatory_values[triple[1]] %}
                    <div title="{{ _('This property is mandatory and cannot be edited') }}" class="info-cursor">
                {% endif %}
                {% if externalEntity %}
                    <a alt="{{_('Redirection to the entity %(entity)s', entity=externalEntity)}}" class="btn btn-outline-primary m-2" title="{{_('Redirection to the entity %(entity)s', entity=externalEntity)}}" href="{{url_for('show_triples', subject=externalEntity)}}">
                        <i class="bi bi-arrow-right-square"></i>
                    </a>
                {% else %}
                    <button class="btn btn-outline-secondary edit-button m-2"
                            {% if shacl and triple[1] in mandatory_values and triple[2] == mandatory_values[triple[1]] %}disabled{% endif %}>
                        <i class="bi bi-pencil-square"></i>
                    </button>
                {% endif %}
                {% if shacl and triple[1] in mandatory_values and triple[2] == mandatory_values[triple[1]] %}
                    </div>
                {% endif %}
                {% if shacl and (triple[1] not in can_be_deleted or (triple[1] in mandatory_values and triple[2] == mandatory_values[triple[1]])) %}
                    <div title="{{ _('This property is mandatory and cannot be deleted') }}" class="info-cursor">
                {% endif %}
                    <button class="btn btn-outline-danger delete-button m-2" 
                            data-subject="{{ subject }}" 
                            data-predicate="{{ triple[1] }}" 
                            data-object="{{ externalEntity if externalEntity else triple[2] }}"
                            {% if shacl and (triple[1] not in can_be_deleted or (triple[1] in mandatory_values and triple[2] == mandatory_values[triple[1]])) %}disabled{% endif %}>
                        <i class="bi bi-trash"></i> <!-- Icona di cancellazione -->
                    </button>
                {% if shacl and (triple[1] not in can_be_deleted or (triple[1] in mandatory_values and triple[2] == mandatory_values[triple[1]])) %}
                    </div>
                {% endif %}
            </div>
        </div>
    </li>
{% endmacro %}

{% macro add_form() %}
    <div class="mb-5 add-form d-none">
        <h5>{{_('Add a new piece of information')}}</h5>
        <form action="{{ url_for('add_triple') }}" method="post">
            {{ create_form.subject(value=subject) }}
            <div class="form-group">
                {{ create_form.predicate(class="form-control predicate-select") }}
            </div>
            <div class="form-group mt-3">
                <label for="object">{{_('Value')}}</label>
                {% if shacl %}
                    <select name="object" class="form-control object-input" style="display: none;">
                        {% for pred, values in optional_values.items() %}
                            {% for value in values %}
                                <option value="{{ value }}" data-predicate="{{ pred }}">{{ value | human_readable_predicate(subject_classes) }}</option>
                            {% endfor %}
                        {% endfor %}
                    </select>
                {% endif %}
                <input type="text" name="object" class="form-control object-input-text" style="display: none;">
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">{{_('Add')}}</button>
                <button type="button" class="btn btn-secondary cancel-add-button">{{_('Cancel')}}</button>
            </div>
        </form>
    </div>
{% endmacro %}

{% extends "_base.jinja" %}

{% block content %}
<div class="container">
    <h2 class="mb-4 ellipsis">{{_('About')}} {{ subject | human_readable_predicate(subject_classes, False) }}</h2>

    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <div class="row col-sm-12 col-md-6 text-center mb-4 mx-auto">
                <div class="alert alert-warning">
                    {{ messages[0] }}
                </div>
            </div>
        {% endif %}
    {% endwith %}

    {% if history[subject] %}
    <div>
        <a href="{{ url_for('entity_history', entity_uri=subject) }}" class="btn btn-outline-primary">
            <i class="bi bi-clock-history"></i> {{_('Time machine')}}
        </a>
    </div>
    {% endif %}

    {% if grouped_triples %}
        <div class="d-flex justify-content-start align-items-baseline mt-5 mb-3">
            <h4 class="me-4">{{ _('Information') }}</h4>
            {% if shacl and not can_be_added %}
                <span title="{{ _('You cannot add more properties; the limit for each property has been reached') }}" class="info-cursor">
                    <button class="btn btn-outline-success add-button" disabled><i class="bi bi-plus-lg"></i></button>
                </span>
            {% else %}
                <button class="btn btn-outline-success add-button" title="{{_('Add new information')}}"><i class="bi bi-plus-lg"></i></button>
            {% endif %}
        </div>
        {{ add_form() }}
        {% for display_name, data in grouped_triples.items() %}
            <div class="predicate-group mb-4">
                {% if data['triples'] %}
                    <span class="fw-bold">{{ display_name | human_readable_predicate(subject_classes) }}</span>
                    {% for triple_data in data['triples'] %}
                        {{ render_triple(triple_data['triple'], subject, triple_data['external_entity'], data['is_draggable'], triple_data['object'], data['ordered_by']) }}
                    {% endfor %}
                {% endif %}
            </div>
        {% endfor %}
    {% else %}
        <p class="alert alert-warning mt-5 mb-4">{{_('There is no information related to this entity in the dataset')}}</p>
        <button class="btn btn-outline-success add-button" title="{{_('Add new information')}}">{{_("Let's add some metadata")}}</button>
        {{ add_form() }}
    {% endif %}
</div>

<script>
    $(document).ready(function () {
        const optional_values = {{ optional_values|tojson|safe }};
        const shacl = {{ shacl|tojson|safe }};

        function toggleEditForm(listItem) {
            const form = listItem.find('.edit-form');
            const valueSpan = listItem.find('.object-value');
            form.toggleClass('d-none');
            valueSpan.toggleClass('d-none');
        }

        function showAddFormOrAlert() {
            can_be_added = {{ can_be_added|tojson|safe }}
            if (can_be_added == null) {
                $(`.add-form`).toggleClass('d-none');
            } else {
                if (can_be_added.length == 0) {
                    Swal.fire({
                        title: "{{ _('Warning') }}",
                        text: "{{ _('You cannot add more properties; the limit for each property has been reached') }}",
                        icon: 'warning',
                        confirmButtonColor: '#3085d6'
                    });
                } else {
                    $(`.add-form`).toggleClass('d-none');
                }
            }
        }

        function updateObjectInput() {
            if (!shacl) {
                $('.object-input-text').show();
                $('.object-input').prop('disabled', true);
                return
            }
            const selectedPredicate = $('.predicate-select').val();
            if (optional_values[selectedPredicate].length > 0) {
                $('.object-input-text').hide().prop('disabled', true);
                $('.object-input').show().prop('disabled', false).find('option').hide().filter(`[data-predicate="${selectedPredicate}"]`).show();
            } else {
                $('.object-input').hide().prop('disabled', true);
                $('.object-input-text').show().prop('disabled', false);
            }
        }

        $('.edit-button').click(function () {
            const isRedirect = $(this).find('i').hasClass('bi-arrow-right-square');
            if (isRedirect) {
                pass
            } else {
                toggleEditForm($(this).closest('.property-value'));
            }
        });

        $('.cancel-button').click(function () {
            toggleEditForm($(this).closest('.property-value'));
            toggleEditForm($(this).closest('form'));
        });

        $('.delete-button').click(function() {
            const subject = $(this).data('subject');
            const predicate = $(this).data('predicate');
            const object_value = $(this).data('object');
            if (!shacl || {{ can_be_deleted | safe }}.includes(predicate)) {
                Swal.fire({
                    title: "{{_('Are you sure?')}}",
                    text: "{{_('You are about to delete this information. In any case, it will be possible to restore it')}}",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: "{{_('Yes, delete it!')}}"
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.post('/delete_triple', {
                            subject: subject,
                            predicate: predicate,
                            object: object_value
                        }, function() {
                            Swal.fire(
                                "{{_('Deleted!')}}",
                                "{{_('The data was deleted correctly')}}",
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        });
                    }
                }); 
            } else {
                Swal.fire({
                    title: "{{ _('Warning') }}",
                    text: "{{ _('This property is mandatory and cannot be deleted') }}",
                    icon: 'warning',
                    confirmButtonColor: '#3085d6'
                });
            }
        });

        $('.add-button').click(function() {
            showAddFormOrAlert();
            updateObjectInput();
        });
        $('.cancel-add-button').click(function() {
            $('.add-form').addClass('d-none');
        });
        $('.predicate-select').change(updateObjectInput);
        $('.predicate-group').each(function() {
            new Sortable(this, {
                animation: 150,
                filter: '.property-value:not(.draggable)',
                draggable: '.draggable',
                handle: '.drag-handle',
                onEnd: function(evt) {
                    let new_order = [];
                    let predicate = null;
                    let orderedBy = null;
                    $(evt.from).find('.property-value').each(function() {
                        new_order.push($(this).data('object-id'));
                        predicate = $(this).data('property-id');
                        orderedBy = $(this).data('ordered_by');
                    });
                    $.ajax({
                        url: '/update_order',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            new_order: new_order,
                            subject: '{{ subject }}',
                            predicate: predicate,
                            ordered_by: orderedBy
                        }),
                        success: function(response) {
                            if (response.status === "success") {
                                // Mostra un messaggio di successo o fai altre azioni se necessario
                            } else {
                                // Gestisci errori o mostra un messaggio di errore
                            }
                        }
                    });
                }
            });
        });
    });
</script>
{% endblock %}